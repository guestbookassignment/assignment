package com.tamilbazaar.mapper;

import com.tamilbazaar.dto.FlatOfferDto;

import com.tamilbazaar.entity.FlatOffer;

import java.util.ArrayList;

import java.util.List;

import javax.annotation.Generated;

import org.mapstruct.factory.Mappers;

@Generated(

    value = "org.mapstruct.ap.MappingProcessor",

    date = "2021-04-29T19:41:04+0100",

    comments = "version: 1.1.0.Final, compiler: javac, environment: Java 1.8.0_231 (Oracle Corporation)"

)

public class FlatOfferMapperImpl extends FlatOfferMapper {

    private final ProductMapper productMapper = Mappers.getMapper( ProductMapper.class );

    @Override

    public FlatOfferDto convertToDTO(FlatOffer entity) {

        if ( entity == null ) {

            return null;
        }

        FlatOfferDto flatOfferDto = new FlatOfferDto();

        flatOfferDto.setOfferId( entity.getOfferId() );

        flatOfferDto.setDescription( entity.getDescription() );

        flatOfferDto.setType( entity.getType() );

        flatOfferDto.setDeleted( entity.isDeleted() );

        flatOfferDto.setSource( productMapper.convertToDTO( entity.getSource() ) );

        flatOfferDto.setPriceOff( entity.getPriceOff() );

        return flatOfferDto;
    }

    @Override

    public List<FlatOfferDto> convertToDTOList(List<FlatOffer> entities) {

        if ( entities == null ) {

            return null;
        }

        List<FlatOfferDto> list = new ArrayList<FlatOfferDto>();

        for ( FlatOffer flatOffer : entities ) {

            list.add( convertToDTO( flatOffer ) );
        }

        return list;
    }

    @Override

    public FlatOffer convertToEntity(FlatOfferDto dto) {

        if ( dto == null ) {

            return null;
        }

        FlatOffer flatOffer = new FlatOffer();

        flatOffer.setOfferId( dto.getOfferId() );

        flatOffer.setDescription( dto.getDescription() );

        flatOffer.setType( dto.getType() );

        flatOffer.setDeleted( dto.isDeleted() );

        flatOffer.setSource( productMapper.convertToEntity( dto.getSource() ) );

        flatOffer.setPriceOff( dto.getPriceOff() );

        return flatOffer;
    }

    @Override

    public List<FlatOffer> convertToEntityList(List<FlatOfferDto> dto) {

        if ( dto == null ) {

            return null;
        }

        List<FlatOffer> list = new ArrayList<FlatOffer>();

        for ( FlatOfferDto flatOfferDto : dto ) {

            list.add( convertToEntity( flatOfferDto ) );
        }

        return list;
    }
}

