package com.guestbook.exception;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.zip.DataFormatException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;

import javassist.NotFoundException;

@ControllerAdvice
public class BaseExceptionHandler {

	private Logger logger = LoggerFactory.getLogger(BaseExceptionHandler.class);
	@ExceptionHandler(NotFoundException.class)
	public final ResponseEntity<Map<String, String>> handleNotFoundExceptions(NotFoundException ex, WebRequest request) {
		Map<String, String> errorMap = new HashMap<>();
		errorMap.put("GB-001", "No data found");
		logger.error(String.format("Errorcode=%s ExceptionMessage=%s", "GB-001", ex.getMessage()));
		return new ResponseEntity<Map<String, String>>(errorMap, HttpStatus.NOT_FOUND);
	}

	@ExceptionHandler(IOException.class)
	public final ResponseEntity<Map<String, String>>  handleIOExceptions(IOException ex, WebRequest request) {
		Map<String, String> errorMap = new HashMap<>();
		errorMap.put("GB-002", "Internal server error");
		logger.error(String.format("Errorcode=%s ExceptionMessage=%s", "GB-002", ex.getMessage()));
		return new ResponseEntity<Map<String, String>> (errorMap, HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
	
	@ExceptionHandler(Exception.class)
	public final ResponseEntity<Map<String, String>>  handleDataFormatExceptions(DataFormatException ex, WebRequest request) {
		Map<String, String> errorMap = new HashMap<>();
		errorMap.put("GB-003", "Internal server error");
		logger.error(String.format("Errorcode=%s ExceptionMessage=%s", "GB-003", ex.getMessage()));
		return new ResponseEntity<Map<String, String>> (errorMap, HttpStatus.BAD_REQUEST);
	}
	
	@ExceptionHandler(Exception.class)
	public final ResponseEntity<Map<String, String>>  handleAllExceptions(Exception ex, WebRequest request) {
		Map<String, String> errorMap = new HashMap<>();
		errorMap.put("GB-004", "Internal server error");
		logger.error(String.format("Errorcode=%s ExceptionMessage=%s", "GB-004", ex.getMessage()));
		return new ResponseEntity<Map<String, String>> (errorMap, HttpStatus.INTERNAL_SERVER_ERROR);
	}
}
